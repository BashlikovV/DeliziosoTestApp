subprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.5'
        def reportsDirPath = "${project.rootDir}/app/build/reports/jacoco/${project.name}"
        reportsDir = file(reportsDirPath)
    }
}

def configureJacoco = { project ->
    def variantName = project.name
    project.tasks.create(name: "getJacocoReports", type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for the $variantName build."
        reports {
            html.enabled = true
            xml.enabled = true
        }
        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/AndroidManifest.xml',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                '**/*Fragment.*',
                '**/*Activity.*',
                '**/*Api.*',
                '**/injection/**/*.class',
                '**/ui/**/*.class',
        ]

        def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac", excludes: excludes)
        def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes", excludes: excludes)
        classDirectories = files([javaClasses, kotlinClasses])

        sourceDirectories = files([
                "${project.projectDir}/src/main/java",
                "${project.projectDir}/src/main/kotlin",
        ])

        executionData = files(fileTree(include: ['*.exec'], dir: "${project.buildDir}/jacoco").files)
    }
}

allprojects { project ->
    configureJacoco(project)
    project.tasks.withType(Test) {
        enabled = true
        jacoco.includeNoLocationClasses = true
    }
}

task getJacocoReports() {
    group = "Reporting"
    subprojects.forEach { subproject ->
        subproject.tasks.withType(JacocoReport).forEach { task ->
            dependsOn task
        }
    }
}